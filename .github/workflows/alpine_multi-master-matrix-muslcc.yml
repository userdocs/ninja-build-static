name: musl.cc ninja - latest master matrix

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        name: [ninja]
        arch:
          [
            aarch64-linux-musl,
            aarch64_be-linux-musl,
            arm-linux-musleabi,
            arm-linux-musleabihf,
            armeb-linux-musleabi,
            armeb-linux-musleabihf,
            armel-linux-musleabi,
            armel-linux-musleabihf,
            armv5l-linux-musleabi,
            armv5l-linux-musleabihf,
            armv6-linux-musleabi,
            armv6-linux-musleabihf,
            armv7l-linux-musleabihf,
            armv7m-linux-musleabi,
            armv7r-linux-musleabihf,
            i486-linux-musl,
            i686-linux-musl,
            m68k-linux-musl,
            microblaze-linux-musl,
            microblazeel-linux-musl,
            mips-linux-musl,
            mips-linux-musln32sf,
            mips-linux-muslsf,
            mips64-linux-musl,
            mips64-linux-musln32,
            mips64-linux-musln32sf,
            mips64el-linux-musl,
            mips64el-linux-musln32,
            mips64el-linux-musln32sf,
            mipsel-linux-musl,
            mipsel-linux-musln32,
            mipsel-linux-musln32sf,
            mipsel-linux-muslsf,
            or1k-linux-musl,
            powerpc-linux-musl,
            powerpc-linux-muslsf,
            powerpc64-linux-musl,
            powerpc64le-linux-musl,
            powerpcle-linux-musl,
            powerpcle-linux-muslsf,
            riscv32-linux-musl,
            riscv64-linux-musl,
            s390x-linux-musl,
            sh2-linux-musl,
            sh2-linux-muslfdpic,
            sh2eb-linux-musl,
            sh2eb-linux-muslfdpic,
            sh4-linux-musl,
            sh4eb-linux-musl,
            x86_64-linux-musl,
            x86_64-linux-muslx32,
          ]

    name: ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v4

      - name: Bootstrap musl cross make toolchains
        run: |
          curl -sLO https://github.com/userdocs/musl-cross-make/releases/latest/download/${{ matrix.arch }}.tar.gz
          tar xf ${{ matrix.arch }}.tar.gz --strip-components=1 -C "$(pwd)"
          echo "release_asset=${{ matrix.arch }}" >> $GITHUB_ENV

          echo "PATH=/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" > env.custom
          echo "LDFLAGS=-s -static --static" >> env.custom
          echo "CHOST=${{ matrix.arch }}" >> env.custom
          echo "CC=${{ matrix.arch }}-gcc" >> env.custom
          echo "AR=${{ matrix.arch }}-ar" >> env.custom
          echo "CXX=${{ matrix.arch }}-g++" >> env.custom

      - name: Docker multiarch bootstrap
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Create docker multiarch ${{ matrix.docker_arch }} container
        run: docker run --name multiarch -it -d --env-file env.custom -w /root -v ${{ github.workspace }}:/root alpine:edge

      - name: Run apk update
        run: docker exec multiarch apk update --repository="${{ env.CDN }}"

      - name: Run apk upgrade
        run: docker exec multiarch apk upgrade --repository="${{ env.CDN }}"

      - name: Run apk to install the core build dependencies
        run: docker exec multiarch apk add build-base git curl linux-headers cmake re2c

      - name: Create tag env
        run: echo "ninja_github_tag=$(curl -sL "https://raw.githubusercontent.com/ninja-build/ninja/master/src/version.cc" | sed -rn 's|const char\* kNinjaVersion = "(.*)";|\1|p' | sed 's/\.git//g')" >> $GITHUB_ENV

      - name: Host - Git clone ${{ matrix.name }}
        run: git clone --no-tags --single-branch --branch master --depth=1 "https://github.com/ninja-build/ninja.git" "${{ matrix.name }}"

      - name: Configure ${{ matrix.name }}
        run: >
          docker exec -w /root/${{ matrix.name }} multiarch cmake -B build
          -D CMAKE_BUILD_TYPE="release"
          -D CMAKE_CXX_STANDARD="17"
          -D CMAKE_INSTALL_PREFIX="/root"

      - name: Cmake Build ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch cmake --build build

      - name: Cmake Install ${{ matrix.name }}
        run: docker exec -w /root/${{ matrix.name }} multiarch cmake --install build

      - name: Rename ${{ matrix.name }} to ${{ env.release_asset }}
        run: docker exec multiarch mv -f /root/bin/${{ matrix.name }} /root/bin/${{ env.release_asset }}

      - name: "Create release"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: bin/${{ env.release_asset }}
          replacesArtifacts: true
          tag: ${{ env.ninja_github_tag }}
          name: ${{ matrix.name }} ${{ env.ninja_github_tag }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
